/*
 * Starter Project for WhatsApp Echo Bot Tutorial
 *
 * Remix this as the starting point for following the WhatsApp Echo Bot tutorial
 *
 */

"use strict";

// Access token for your app
// (copy token from DevX getting started page
// and save it as environment variable into the .env file)
const token = process.env.WHATSAPP_TOKEN;


// Imports dependencies and set up http server

const request = require("request"),
  express = require("express"),
  body_parser = require("body-parser"),
  axios = require("axios").default,
  app = express().use(body_parser.json()); // creates express http server

// Sets server port and logs message on success
app.listen(process.env.PORT || 1337, () => console.log("webhook is listening"));





app.post("/webhook", async (req, res) => {



  
  let body = req.body;

  console.log('POST REQ');
  console.log(JSON.stringify(req.body, null, 2));

  // Check if the webhook event is from a WhatsApp account and if it's a message
  if (body.object === "whatsapp_business_account") {
    // Check if the event is a message and not a message status update
    if (body.entry && body.entry[0].changes && body.entry[0].changes[0].field === "messages") {
   
      let messageData = body.entry[0].changes[0].value;

      // Check if it's an incoming message and not an outgoing message or status update
      if (messageData.messages && messageData.messages.length > 0 && !messageData.messages[0].from_me) {
        
          console.log('MESSAGE COMING');
        let phone_number_id = messageData.metadata.phone_number_id;
        let from = messageData.messages[0].from;
        let msg_body = messageData.messages[0].text.body;
        
  
        

        // Respond to the message or process it here
        // For example, sending an acknowledgment message back
        axios({
          method: "POST",
          url: `https://graph.facebook.com/v12.0/${phone_number_id}/messages?access_token=${token}`,
          data: {
            messaging_product: "whatsapp",
            to: from,
            text: { body: "Ack: " + msg_body },
          },
          headers: { "Content-Type": "application/json" },
        }).catch((error) => {
          console.error("Error sending message:", error);
        });
        
      }
    }
    res.sendStatus(200);
  } else {
    res.sendStatus(404);
  }
});



// Accepts GET requests at the /webhook endpoint. You need this URL to setup webhook initially.
// info on verification request payload: https://developers.facebook.com/docs/graph-api/webhooks/getting-started#verification-requests 
app.get("/webhook", (req, res) => {
  /**
   * UPDATE YOUR VERIFY TOKEN
   *This will be the Verify Token value when you set up webhook
  **/
  const verify_token = process.env.VERIFY_TOKEN;
  // Parse params from the webhook verification request
  let mode = req.query["hub.mode"];
  let token = req.query["hub.verify_token"];
  let challenge = req.query["hub.challenge"];
  console.log('GET REQ')

  // Check if a token and mode were sent
  if (mode && token) {
    // Check the mode and token sent are correct
    if (mode === "subscribe" && token === verify_token) {
      // Respond with 200 OK and challenge token from the request
      console.log("WEBHOOK_VERIFIED");
      console.log(req.query);
      res.status(200).send(challenge);
      
    } else {
      // Responds with '403 Forbidden' if verify tokens do not match
      res.sendStatus(403);
    }
  }
});
